from pydantic import BaseModel, Field
from datetime import datetime
from typing import Optional
from neo4j_driver import driver, Neo4jDriver
import logging

class VulnerabilityRepository(BaseModel):
    name: str
    last_updated: Optional[datetime] = Field(default_factory=datetime.utcnow)

#this is currently not functional
def create_repository_in_neo4j(repo: VulnerabilityRepository):
    try:
        with Neo4jDriver.get_driver().session() as session:
            query = """
            CREATE (r:Repository {
                name: $name, 
                last_updated: $last_updated
            })
            RETURN r.name AS name, 
                   id(r) AS numeric_id
            """
            
            params = {
                "name": repo.name,
                "last_updated": repo.last_updated.isoformat()
            }
            
            result = session.run(query, params)
            record = result.single()
            
            if record:
                # Use simple print with basic attributes
                print(f"Repository Created - Name: {record['name']}")
                print(f"Numeric ID: {record['numeric_id']}")
                
                return {
                    "name": record['name'],
                    "numeric_id": record['numeric_id']
                }
            
            return None
    except Exception as e:
        print(f"Error creating repository: {e}")
        return None

def update_repository_in_neo4j(repo: VulnerabilityRepository):
    """Updates an existing VulnerabilityRepository node in Neo4j."""
    with driver.session() as session:
        query = """
        MATCH (r:VulnerabilityRepository {name: $name})
        SET r.last_updated = $last_updated
        RETURN r
        """
        session.run(query, name=repo.name, last_updated=repo.last_updated.isoformat())

def repository_exists_in_neo4j(repo: VulnerabilityRepository) -> bool:
    """Checks if a VulnerabilityRepository exists in Neo4j."""
    with driver.session() as session:
        query = """
        MATCH (r:VulnerabilityRepository {name: $name})
        RETURN COUNT(r) > 0 AS exists
        """
        result = session.run(query, name=repo.name)
        return result.single()["exists"]