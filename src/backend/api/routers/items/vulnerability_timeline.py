from fastapi import APIRouter, Depends
from pydantic import BaseModel
from typing import List
from osv.neo4j_connection import get_neo4j_driver

router = APIRouter()

# Pydantic model for our time-series data
class VulnerabilityDailyCount(BaseModel):
    date: str
    count: int

@router.get("/vulnerability_timeline", response_model=List[VulnerabilityDailyCount])
async def get_vulnerability_timeline(driver=Depends(get_neo4j_driver)):
    """
    Return daily counts of vulnerabilities for charting.
    This query assumes v.published is an ISO date/time string
    that can be converted via datetime(...).
    Adjust as needed for your actual data format.
    """
    query = """
    MATCH (v:Vulnerability)
    WHERE v.published IS NOT NULL
    WITH date(datetime(v.published)) AS publishedDate
    RETURN publishedDate AS date, count(*) AS count
    ORDER BY date ASC
    """
    with driver.session() as session:
        result = session.run(query)
        data = [
            {"date": str(record["date"]), "count": record["count"]}
            for record in result
        ]
        return data
